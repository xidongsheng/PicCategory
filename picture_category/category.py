# -*- coding: UTF-8 -*-
import os
import shutil
from picture_category import picExif
import time
import re
import logging
import configparser

def scanDirGetPic(dir):
    #get all pictures, file size should be larger than 300KB,
    categoryPicList = []  #store photos which fullfill requirements
    unCategoryPicList = [] #store small pictures which not photo generated by camera and smartphone
    for root, dirs, files in os.walk(dir, True, None, False):
        for f in files:
            if os.path.isfile(os.path.join(root,f)):
                ext = os.path.splitext(f)[1].lower()
                filesize = os.path.getsize(os.path.join(root,f))
                if ext in ('.jpg','.jpeg','.bmp') and filesize > 307200:
                    categoryPicList.append(os.path.join(root,f))
                    # print(os.path.join(root,f))
                    #print os.path.join(root,f)
                else:
                    unCategoryPicList.append(os.path.join(root,f))

    logging.info('total picture counts（原始图片总张数）: %d' %(len(categoryPicList)+len(unCategoryPicList)) )
    logging.info(' to be categoried picture counts(待分类照片总张数) : %d' %len(categoryPicList))
    logging.info('uncategoried picture(no exif;not pic ext; fill size too smale) '
                 'counts(不能分类照片总张数) : %d' % len(unCategoryPicList))

    return categoryPicList,unCategoryPicList


def cpCategoriedFile(srcPath,destDir):
    ''' input a photo file path, and rename picture to a new name (createtime_model),then copy it to destDir

    :param srcPath:
    :param destDir:
    :return:
    '''
    fileNameRaw = os.path.basename(srcPath)
    ext = os.path.splitext(fileNameRaw)[1].lower()

    picInfo = picExif.get_exif(srcPath)
    if picInfo != None:
        createTime = picInfo['DateTimeOriginal'] if 'DateTimeOriginal' in picInfo.keys() else "1970:01:01 23:59:59"

        #if exif don't have time info, then use file modify time.
        if re.match('^[0-9]{4}:[0-9]{1,2}:[0-9]{1,2} [0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}$',createTime):
            createTime_T = time.strptime(createTime,'%Y:%m:%d %H:%M:%S')
        else:
            createTime_T = time.localtime(os.path.getmtime(srcPath))

        createTime = time.strftime('%Y_%m_%d_%H_%M_%S',createTime_T)
        model = picInfo['Model'] if 'Model' in picInfo.keys() else "unknown_model"
        #only keep efftive characters as filename
        model = re.sub('[^a-zA-Z0-9]','',model)

        fileName = createTime+'_'+model+ext
        # dest folder is monthly folder
        destFolder = time.strftime('%Y_%m',createTime_T)

        # if dest folder don't exists, create dir
        if not os.path.exists(destDir + os.path.sep + destFolder):
            os.makedirs(destDir + os.path.sep + destFolder)

        destPath = destDir + os.path.sep + destFolder+os.path.sep + fileName
        if os.path.exists(srcPath) and not os.path.exists(destPath):
            logging.debug('cp %s %s' % (srcPath,destPath))
            shutil.copy(srcPath,destPath)

    else: #photo don't have exif info, copy to unCategoried Folder
        logging.info('%s dont have exif info(无照片信息)' %srcPath)
        destFolder = 'unCategoried'
        if not os.path.exists(destDir + os.path.sep + destFolder):
            os.makedirs(destDir + os.path.sep + destFolder)

        destPath = destDir + os.path.sep + destFolder + os.path.sep + fileNameRaw

        if os.path.exists(srcPath) and not os.path.exists(destPath):
            logging.debug('cp %s %s' % (srcPath, destPath))
            shutil.copy(srcPath, destPath)


def cpUnCategoriedFile(srcPath,destDir):

    fileNameRaw = os.path.basename(srcPath)
    destFolder = 'unCategoried'
    if not os.path.exists(destDir + os.path.sep + destFolder):
        os.makedirs(destDir + os.path.sep + destFolder)

    destPath = destDir + os.path.sep + destFolder + os.path.sep + fileNameRaw

    if os.path.exists(srcPath) and not os.path.exists(destPath):
        logging.debug('cp %s %s' % (srcPath, destPath))
        shutil.copy(srcPath, destPath)


def category(inputDir,destDir):
    '''
    category photos
    :param inputDir:
    :param destDir:
    :return:
    '''

    categoryPicList, unCategoryPicList = scanDirGetPic(inputDir)
    for pic in categoryPicList:
        cpCategoriedFile(pic,destDir)

    for pic in unCategoryPicList:
        cpUnCategoriedFile(pic,destDir)
