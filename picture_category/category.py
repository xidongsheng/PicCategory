# -*- coding: UTF-8 -*-
import os
import shutil
from picture_category import pic_exif
import time
import re
import logging


def scan_dir_get_pic(pic_dir):
    """
    get all pictures, file size should be larger than 300KB,
    :param pic_dir:
    :return: category_pic, un_category_pic
    """
    category_pic = []  # store photos which full fill requirements
    un_category_pic = []  # store small pictures which not photo generated by camera and smart phone
    for root, dirs, files in os.walk(pic_dir, True, None, False):
        for f in files:
            if os.path.isfile(os.path.join(root, f)):
                ext = os.path.splitext(f)[1].lower()
                file_size = os.path.getsize(os.path.join(root, f))
                if ext in ('.jpg', '.jpeg', '.bmp') and file_size > 307200:
                    category_pic.append(os.path.join(root, f))
                    # print(os.path.join(root,f))
                else:
                    un_category_pic.append(os.path.join(root, f))

    logging.info('total picture counts（原始图片总张数）: %d' % (len(category_pic) + len(un_category_pic)))
    logging.info(' to be categorized picture counts(待分类照片总张数) : %d' % len(category_pic))
    logging.info('un_categorized picture(no exif; not pic ext; file size too small) '
                 'counts(不能分类照片总张数) : %d' % len(un_category_pic))

    return category_pic, un_category_pic


def cp_categorized_file(src_path, dest_dir):
    """
    input a photo file path, and rename picture to a new name (create_time_model),then copy it to dest_dir
    :param src_path:
    :param dest_dir:
    :return:
    """
    file_name_raw = os.path.basename(src_path)
    ext = os.path.splitext(file_name_raw)[1].lower()
    _datetime_re = re.compile('^[0-9]{4}:[0-9]{1,2}:[0-9]{1,2} [0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}$')
    pic_info = pic_exif.get_exif(src_path)
    if pic_info is not None:

        # if exif don't have time info, then use file modify time.
        if 'DateTimeOriginal' in pic_info.keys():
            create_time_str = pic_info['DateTimeOriginal']
        else:
            create_time_str = "1970:01:01 23:59:59"

        if _datetime_re.match(create_time_str):
            create_time = time.strptime(create_time_str, '%Y:%m:%d %H:%M:%S')
        else:
            create_time = time.localtime(os.path.getmtime(src_path))

        # create_time_file are used as part of final file name
        create_time_file = time.strftime('%Y_%m_%d_%H_%M_%S', create_time)

        model = pic_info['Model'] if 'Model' in pic_info.keys() else "unknown_model"
        # only keep effective characters as filename
        model = re.sub('[^a-zA-Z0-9]', '', model)

        file_name = create_time_file + '_' + model + ext

        # dest folder is monthly folder
        dest_folder = time.strftime('%Y_%m', create_time)

        # if dest folder don't exists, create dir
        if not os.path.exists(dest_dir + os.path.sep + dest_folder):
            os.makedirs(dest_dir + os.path.sep + dest_folder)

        dest_path = dest_dir + os.path.sep + dest_folder + os.path.sep + file_name
        if os.path.exists(src_path) and not os.path.exists(dest_path):
            logging.debug('cp %s %s' % (src_path, dest_path))
            shutil.copy(src_path, dest_path)

    else:  # photo don't have exif info, copy to un_categorized folder
        logging.info('%s dont have exif info(无照片信息)' % src_path)
        dest_folder = 'un_categorized'
        if not os.path.exists(dest_dir + os.path.sep + dest_folder):
            os.makedirs(dest_dir + os.path.sep + dest_folder)

        dest_path = dest_dir + os.path.sep + dest_folder + os.path.sep + file_name_raw
        if os.path.exists(src_path) and not os.path.exists(dest_path):
            logging.debug('cp %s %s' % (src_path, dest_path))
            shutil.copy(src_path, dest_path)


def cp_un_categorized_file(src_path, dest_dir):
    file_name_raw = os.path.basename(src_path)
    dest_folder = 'un_categorized'
    if not os.path.exists(dest_dir + os.path.sep + dest_folder):
        os.makedirs(dest_dir + os.path.sep + dest_folder)

    dest_path = dest_dir + os.path.sep + dest_folder + os.path.sep + file_name_raw

    if os.path.exists(src_path) and not os.path.exists(dest_path):
        logging.debug('cp %s %s' % (src_path, dest_path))
        shutil.copy(src_path, dest_path)


def category(input_dir, dest_dir):
    '''
    category photos
    :param input_dir:
    :param dest_dir:
    :return:
    '''

    category_pic, un_category_pic = scan_dir_get_pic(input_dir)
    for pic in category_pic:
        cp_categorized_file(pic, dest_dir)

    for pic in un_category_pic:
        cp_un_categorized_file(pic, dest_dir)
